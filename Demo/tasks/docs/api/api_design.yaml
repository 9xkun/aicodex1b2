openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: "John"
                lastname:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                  uniqueItems: true
                password:
                  type: string
                  example: "securePassword123"
                  uniqueItems: true
                age:
                  type: integer
                  example: 30
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: "John"
                lastname:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                  uniqueItems: true
                password:
                  type: string
                  example: "newSecurePassword123"
                  uniqueItems: true
                age:
                  type: integer
                  example: 31
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.com"
          uniqueItems: true
        password:
          type: string
          example: "securePassword123"
          uniqueItems: true
        age:
          type: integer
          example: 30